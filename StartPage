import SwiftUIimport SwiftUI

struct DeviceRotationViewModifier: ViewModifier
{
    let action: (UIDeviceOrientation) -> Void
    
    func body(content: Content) -> some View
    {
        content
            .onAppear()
            .onReceive(NotificationCenter.default.publisher(for: UIDevice.orientationDidChangeNotification))
        {
            _ in action(UIDevice.current.orientation)
        }
    }
}

extension View
{
    func onRotate(perform action: @escaping (UIDeviceOrientation) -> Void) -> some View
    {
        self.modifier(DeviceRotationViewModifier(action: action))
    }
}

struct StartPage: View 
{
    @State private var orientation = UIDeviceOrientation.unknown
    
    var body: some View 
    {
        VStack(spacing: 30)
        {
            if orientation.isLandscape
            {
                Text("Polish Log").foregroundColor(.black).font(.largeTitle)
            
                Button(action: {
                print("Tapped!") })
                {
                    Text("Your Logs")
                        .padding()
                        .background(Color.white)
                        .cornerRadius(40)
                        .foregroundColor(.black)
                        .overlay(RoundedRectangle(cornerRadius: 40).stroke(Color.pink, lineWidth: 5))
                }
            }
            else if orientation.isPortrait
            {
                Text("Polish Log").foregroundColor(.black).font(.largeTitle)
                
                Button(action: {
                    print("Tapped!") })
                {
                    Text("Your Logs")
                        .padding()
                        .background(Color.white)
                        .cornerRadius(40)
                        .foregroundColor(.black)
                        .overlay(RoundedRectangle(cornerRadius: 40).stroke(Color.pink, lineWidth: 5))
                }
            }
        }
            .frame(maxWidth: .infinity, maxHeight: .infinity)
            .background(LinearGradient(gradient: Gradient(colors: [.white, .pink]), startPoint: .center, endPoint: .bottom))
            .onRotate { newOrientation in
                orientation = newOrientation
            }
    }
}


struct StartPage: View 
{
    var body: some View 
    {
        VStack 
        {
            Text("Polish Log").foregroundColor(.black).font(.largeTitle).position(x: 270, y: 200)
            
            Button(action: {
                print("Tapped!")
            }) {
                Text("Your Logs")
                    .padding()
                    .background(Color.white)
                    .cornerRadius(40)
                    .foregroundColor(.black)
                    .overlay(RoundedRectangle(cornerRadius: 40).stroke(Color.pink, lineWidth: 5))
                    .position(x: 270, y: 15)
            }
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .background(LinearGradient(gradient: Gradient(colors: [.white, .pink]), startPoint: .center, endPoint: .bottom))
    }
}
